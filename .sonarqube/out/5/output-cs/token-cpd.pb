à

6D:\Repos\CommonCore\CommonCore.Standard\CommonRegex.cs
	namespace 	

CommonCore
 
. 
Standard 
{ 
public 

static 
class 
CommonRegex #
{		 
public

 
const

 
string

 
NAMESPACE_PATTERN

 -
=

. /
$str

0 J
;

J K
public 
const 
string 
NEXTWORD_PATTERN ,
=- .
$str/ :
;: ;
public 
static 
Regex 
NamespaceRegex *
(* +
)+ ,
=>- /
new0 3
Regex4 9
(9 :
NAMESPACE_PATTERN: K
)K L
;L M
public 
static 
Regex 
UsingNamespaceRegex /
(/ 0
string0 6
ns7 9
)9 :
{ 	
var 
pattern 
= 
$" 
$str %
{% &
ns& (
}( )
$str) .
". /
;/ 0
var 
result 
= 
new 
Regex "
(" #
pattern# *
)* +
;+ ,
return 
result 
; 
} 	
} 
} ã'
DD:\Repos\CommonCore\CommonCore.Standard\Extensions\LinqExtensions.cs
	namespace 	

CommonCore
 
. 
Standard 
. 

Extensions (
{		 
public

 

static

 
class

 
LinqExtensions

 &
{ 
public 
static 
bool 
None 
<  
T  !
>! "
(" #
this# '
IEnumerable( 3
<3 4
T4 5
>5 6
list7 ;
); <
{ 	
return 
list 
== 
null 
||  "
!# $
list$ (
.( )
Any) ,
(, -
)- .
;. /
} 	
public 
static 
bool 
None 
<  
T  !
>! "
(" #
this# '
IEnumerable( 3
<3 4
T4 5
>5 6
list7 ;
,; <
Func= A
<A B
TB C
,C D
boolE I
>I J
	predicateK T
)T U
{ 	
return 
list 
== 
null 
||  "
!# $
list$ (
.( )
Any) ,
(, -
	predicate- 6
)6 7
;7 8
} 	
public 
static 
IDictionary !
<! "
K" #
,# $
V% &
>& '
AddRange( 0
<0 1
K1 2
,2 3
V4 5
>5 6
(6 7
this7 ;
IDictionary< G
<G H
KH I
,I J
VK L
>L M
oneN Q
,Q R
IDictionaryS ^
<^ _
K_ `
,` a
Vb c
>c d
twoe h
)h i
{ 	
foreach 
( 
var 
kvp 
in 
two  #
)# $
{ 
if 
( 
one 
. 
ContainsKey #
(# $
kvp$ '
.' (
Key( +
)+ ,
), -
one 
[ 
kvp 
. 
Key 
]  
=! "
two# &
[& '
kvp' *
.* +
Key+ .
]. /
;/ 0
else 
one 
. 
Add 
( 
kvp 
.  
Key  #
,# $
kvp% (
.( )
Value) .
). /
;/ 0
} 
return   
one   
;   
}!! 	
public## 
static## 
bool## 
Contains## #
<### $
T##$ %
>##% &
(##& '
this##' +
IEnumerable##, 7
<##7 8
T##8 9
>##9 :
one##; >
,##> ?
Func##@ D
<##D E
T##E F
,##F G
bool##H L
>##L M

expression##N X
)##X Y
=>$$ 
one$$ 
.$$ 
Any$$ 
($$ 

expression$$ !
)$$! "
;$$" #
public&& 
static&& 
IEnumerable&& !
<&&! "
T&&" #
>&&# $!
RangeBetweenInclusive&&% :
<&&: ;
T&&; <
>&&< =
(&&= >
this&&> B
IEnumerable&&C N
<&&N O
T&&O P
>&&P Q
list&&R V
,&&V W
int&&X [
start&&\ a
,&&a b
int&&c f
end&&g j
)&&j k
{'' 	
var(( 
take(( 
=(( 
end(( 
-(( 
start(( "
+((# $
$num((% &
;((& '
var)) 
result)) 
=)) 
list)) 
.)) 
Skip)) "
())" #
start))# (
)))( )
.))) *
Take))* .
()). /
take))/ 3
)))3 4
;))4 5
return** 
result** 
;** 
}++ 	
public-- 
static-- 
IEnumerable-- !
<--! "
T--" #
>--# $
Distinct--% -
<--- .
T--. /
,--/ 0
T2--1 3
>--3 4
(--4 5
this--5 9
IEnumerable--: E
<--E F
T--F G
>--G H
list--I M
,--M N
Func--O S
<--S T
T--T U
,--U V
T2--W Y
>--Y Z
	predicate--[ d
)--d e
=>.. 
list.. 
... 
GroupBy.. 
(.. 
	predicate.. %
)..% &
.// 
Select// 
(// 
x// 
=>// 
x// 
.// 
FirstOrDefault// -
(//- .
)//. /
)/// 0
;//0 1
}11 
}22 é
FD:\Repos\CommonCore\CommonCore.Standard\Extensions\StringExtensions.cs
	namespace 	

CommonCore
 
. 
Standard 
. 

Extensions (
{ 
public 

static 
class 
StringExtensions (
{ 
public		 
static		 
int		 #
IndexOfClosingCharacter		 1
(		1 2
this		2 6
string		7 =
text		> B
,		B C
char		D H
open		I M
=		N O
$char		P S
,		S T
char		U Y
closed		Z `
=		a b
$char		c f
,		f g
int		h k
startAt		l s
=		t u
$num		v w
)		w x
{

 	
int 
	charsOpen 
= 
$num 
; 
int 
charsClosed 
= 
$num 
;  
for 
( 
int 
i 
= 
startAt  
;  !
i" #
<$ %
text& *
.* +
Length+ 1
;1 2
i3 4
++4 6
)6 7
{ 
char 
c 
= 
text 
[ 
i 
]  
;  !
if 
( 
c 
== 
open 
) 
{ 
	charsOpen 
++ 
;  
} 
else 
if 
( 
c 
== 
closed $
)$ %
{ 
charsClosed 
++ !
;! "
} 
if 
( 
	charsOpen 
==  
charsClosed! ,
&&- /
	charsOpen0 9
>: ;
$num< =
)= >
return? E
iF G
;G H
} 
return 
- 
$num 
; 
} 	
public 
static 
bool 
Closes !
(! "
this" &
string' -
text. 2
,2 3
char4 8
open9 =
=> ?
$char@ C
,C D
charE I
closedJ P
=Q R
$charS V
,V W
intX [
startAt\ c
=d e
$numf g
)g h
{   	
int!! 
	charsOpen!! 
=!! 
$num!! 
;!! 
int"" 
charsClosed"" 
="" 
$num"" 
;""  
for$$ 
($$ 
int$$ 
i$$ 
=$$ 
startAt$$  
;$$  !
i$$" #
<$$$ %
text$$& *
.$$* +
Length$$+ 1
;$$1 2
i$$3 4
++$$4 6
)$$6 7
{%% 
char&& 
c&& 
=&& 
text&& 
[&& 
i&& 
]&&  
;&&  !
if'' 
('' 
c'' 
=='' 
open'' 
)'' 
{(( 
	charsOpen)) 
++)) 
;))  
}** 
else++ 
if++ 
(++ 
c++ 
==++ 
closed++ $
)++$ %
{,, 
charsClosed-- 
++-- !
;--! "
}.. 
}00 
return11 
	charsOpen11 
==11 
charsClosed11  +
;11+ ,
}22 	
public44 
static44 
int44 

MatchCount44 $
(44$ %
this44% )
string44* 0
str441 4
,444 5
string446 <
regex44= B
)44B C
=>55 
Regex55 
.55 
Matches55 
(55 
str55  
,55  !
regex55" '
)55' (
?55( )
.55) *
Count55* /
??550 2
$num553 4
;554 5
}77 
}88 Ú_
JD:\Repos\CommonCore\CommonCore.Standard\Extensions\StringFileExtensions.cs
	namespace 	

CommonCore
 
. 
Standard 
. 

Extensions (
{ 
public		 

static		 
class		  
StringFileExtensions		 ,
{

 
public 
static 
string !
PathFromDeepestFolder 2
(2 3
this3 7
string8 >
path? C
,C D
stringE K
folderL R
)R S
{ 	
var 
index 
= 
path 
. "
IndexOfToDeepestFolder 3
(3 4
folder4 :
,: ;
out< ?
List@ D
<D E
stringE K
>K L
partsM R
)R S
;S T
var 
start 
= 
index 
; 
parts 
= 
parts 
. !
RangeBetweenInclusive /
(/ 0
start0 5
,5 6
parts7 <
.< =
Count= B
-C D
$numE F
)F G
.G H
ToListH N
(N O
)O P
;P Q
return 
Path 
. 
Combine 
(  
parts  %
.% &
ToArray& -
(- .
). /
)/ 0
;0 1
} 	
public 
static 
string 
PathToDeepestFolder 0
(0 1
this1 5
string6 <
path= A
,A B
stringC I
folderJ P
)P Q
{ 	
var 
index 
= 
path 
. "
IndexOfToDeepestFolder 3
(3 4
folder4 :
,: ;
out< ?
List@ D
<D E
stringE K
>K L
partsM R
)R S
;S T
parts 
= 
parts 
. !
RangeBetweenInclusive /
(/ 0
$num0 1
,1 2
index3 8
)8 9
.9 :
ToList: @
(@ A
)A B
;B C
return 
Path 
. 
Combine 
(  
parts  %
.% &
ToArray& -
(- .
). /
)/ 0
;0 1
} 	
public 
static 
int "
IndexOfToDeepestFolder 0
(0 1
this1 5
string6 <
path= A
,A B
stringC I
folderJ P
,P Q
outR U
ListV Z
<Z [
string[ a
>a b
partsc h
)h i
{ 	
parts 
= 
path 
. 
Split 
( 
Path #
.# $"
DirectorySeparatorChar$ :
): ;
.; <
ToList< B
(B C
)C D
;D E
parts 
. 
Reverse 
( 
) 
; 
var!! 
indexOf!! 
=!! 
parts!! 
.!!  
IndexOf!!  '
(!!' (
folder!!( .
)!!. /
;!!/ 0
if"" 
("" 
indexOf"" 
<"" 
$num"" 
)"" 
return"" #
-""$ %
$num""% &
;""& '
var$$ 
result$$ 
=$$ 
parts$$ 
.$$ 
Count$$ $
-$$% &
indexOf$$' .
-$$/ 0
$num$$1 2
;$$2 3
parts%% 
.%% 
Reverse%% 
(%% 
)%% 
;%% 
return'' 
result'' 
;'' 
}(( 	
public** 
static** 
int** %
IndexOfToShallowestFolder** 3
(**3 4
this**4 8
string**9 ?
path**@ D
,**D E
string**F L
folder**M S
,**S T
out**U X
List**Y ]
<**] ^
string**^ d
>**d e
parts**f k
)**k l
{++ 	
parts,, 
=,, 
path,, 
.,, 
Split,, 
(,, 
Path,, #
.,,# $"
DirectorySeparatorChar,,$ :
),,: ;
.,,; <
ToList,,< B
(,,B C
),,C D
;,,D E
return-- 
parts-- 
.-- 
IndexOf--  
(--  !
folder--! '
)--' (
;--( )
}.. 	
public00 
static00 
string00 2
&PathBetweenFoldersToDeepestOccurrances00 C
(00C D
this00D H
string00I O
path00P T
,00T U
string00V \
startFolder00] h
,00h i
string00j p
	endFolder00q z
)00z {
{11 	
var22 
endIndex22 
=22 
path22 
.22  "
IndexOfToDeepestFolder22  6
(226 7
	endFolder227 @
,22@ A
out22B E
List22F J
<22J K
string22K Q
>22Q R
parts22S X
)22X Y
;22Y Z
var33 

startIndex33 
=33 
path33 !
.33! ""
IndexOfToDeepestFolder33" 8
(338 9
startFolder339 D
,33D E
out33F I
parts33J O
)33O P
;33P Q
if44 
(44 
endIndex44 
<44 

startIndex44 %
)44% &
throw44' ,
new44- 0
	Exception441 :
(44: ;
$str44; e
)44e f
;44f g
var66 
resultParts66 
=66 
parts66 #
.66# $!
RangeBetweenInclusive66$ 9
(669 :

startIndex66: D
,66D E
endIndex66F N
)66N O
;66O P
return77 
Path77 
.77 
Combine77 
(77  
resultParts77  +
.77+ ,
ToArray77, 3
(773 4
)774 5
)775 6
;776 7
}88 	
public:: 
static:: 
string:: "
PathToShallowestFolder:: 3
(::3 4
this::4 8
string::9 ?
path::@ D
,::D E
string::F L
folder::M S
)::S T
{;; 	
var<< 
index<< 
=<< 
path<< 
.<< %
IndexOfToShallowestFolder<< 6
(<<6 7
folder<<7 =
,<<= >
out<<? B
List<<C G
<<<G H
string<<H N
><<N O
parts<<P U
)<<U V
;<<V W
parts== 
=== 
parts== 
.== !
RangeBetweenInclusive== /
(==/ 0
$num==0 1
,==1 2
index==3 8
)==8 9
.==9 :
ToList==: @
(==@ A
)==A B
;==B C
return>> 
Path>> 
.>> 
Combine>> 
(>>  
parts>>  %
.>>% &
ToArray>>& -
(>>- .
)>>. /
)>>/ 0
;>>0 1
}?? 	
publicAA 
staticAA 
stringAA 
ParentFolderPathAA -
(AA- .
thisAA. 2
stringAA3 9
pathAA: >
)AA> ?
{BB 	
stringCC 
[CC 
]CC 
partsCC 
=CC 
pathCC !
.CC! "
SplitCC" '
(CC' (
PathCC( ,
.CC, -"
DirectorySeparatorCharCC- C
)CCC D
;CCD E
ifDD 
(DD 
partsDD 
.DD 
LengthDD 
<DD 
$numDD  
)DD  !
returnDD" (
nullDD) -
;DD- .
varFF 
resultPartsFF 
=FF 
partsFF #
.FF# $!
RangeBetweenInclusiveFF$ 9
(FF9 :
$numFF: ;
,FF; <
partsFF= B
.FFB C
LengthFFC I
-FFJ K
$numFFL M
)FFM N
;FFN O
returnGG 
PathGG 
.GG 
CombineGG 
(GG  
resultPartsGG  +
.GG+ ,
ToArrayGG, 3
(GG3 4
)GG4 5
)GG5 6
;GG6 7
}HH 	
publicJJ 
staticJJ 
stringJJ 
ParentFolderNameJJ -
(JJ- .
thisJJ. 2
stringJJ3 9
pathJJ: >
)JJ> ?
{KK 	
IEnumerableLL 
<LL 
stringLL 
>LL 
partsLL  %
=LL& '
pathLL( ,
.LL, -
SplitLL- 2
(LL2 3
PathLL3 7
.LL7 8"
DirectorySeparatorCharLL8 N
)LLN O
;LLO P
ifMM 
(MM 
partsMM 
.MM 
CountMM 
(MM 
)MM 
<MM 
$numMM  !
)MM! "
returnMM# )
nullMM* .
;MM. /
partsOO 
=OO 
partsOO 
.OO 
ReverseOO !
(OO! "
)OO" #
;OO# $
returnPP 
partsPP 
.PP 
	ElementAtPP "
(PP" #
$numPP# $
)PP$ %
;PP% &
}QQ 	
publicSS 
staticSS 
stringSS 
FilenameSS %
(SS% &
thisSS& *
stringSS+ 1
pathSS2 6
)SS6 7
{TT 	
IEnumerableUU 
<UU 
stringUU 
>UU 
partsUU  %
=UU& '
pathUU( ,
.UU, -
SplitUU- 2
(UU2 3
PathUU3 7
.UU7 8"
DirectorySeparatorCharUU8 N
)UUN O
;UUO P
varVV 
fileNameVV 
=VV 
partsVV  
.VV  !
LastOrDefaultVV! .
(VV. /
)VV/ 0
;VV0 1
ifWW 
(WW 
stringWW 
.WW 
IsNullOrWhiteSpaceWW )
(WW) *
fileNameWW* 2
)WW2 3
)WW3 4
returnWW5 ;
nullWW< @
;WW@ A
varYY 
	filePartsYY 
=YY 
fileNameYY $
.YY$ %
SplitYY% *
(YY* +
$charYY+ .
)YY. /
;YY/ 0
ifZZ 
(ZZ 
	filePartsZZ 
.ZZ 
LengthZZ  
<ZZ! "
$numZZ# $
)ZZ$ %
returnZZ& ,
nullZZ- 1
;ZZ1 2
return\\ 
	fileParts\\ 
.\\ 
FirstOrDefault\\ +
(\\+ ,
)\\, -
;\\- .
}]] 	
public__ 
static__ 
string__ 

FolderName__ '
(__' (
this__( ,
string__- 3
path__4 8
)__8 9
{`` 	
ifaa 
(aa 
stringaa 
.aa 
IsNullOrWhiteSpaceaa )
(aa) *
pathaa* .
)aa. /
)aa/ 0
returnaa1 7
nullaa8 <
;aa< =
IEnumerablecc 
<cc 
stringcc 
>cc 
partscc  %
=cc& '
pathcc( ,
.cc, -
Splitcc- 2
(cc2 3
Pathcc3 7
.cc7 8"
DirectorySeparatorCharcc8 N
)ccN O
;ccO P
ifdd 
(dd 
partsdd 
.dd 
Countdd 
(dd 
)dd 
<dd 
$numdd  !
)dd! "
returndd# )
nulldd* .
;dd. /
varee 
nameee 
=ee 
partsee 
.ee 
LastOrDefaultee *
(ee* +
)ee+ ,
;ee, -
varff 
	namePartsff 
=ff 
nameff  
.ff  !
Splitff! &
(ff& '
$charff' *
)ff* +
;ff+ ,
returnhh 
	namePartshh 
.hh 
	ElementAthh &
(hh& '
$numhh' (
)hh( )
;hh) *
}ii 	
}jj 
}kk 